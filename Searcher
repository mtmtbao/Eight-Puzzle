#
# searcher.py (Final project)
#
# classes for objects that perform state-space search on Eight Puzzles  
#
# name: Mengting Bao
# email: mtbao@bu.edu
# BUID: U96992717
# 06/26/2022
#

import random
from state import *

class Searcher:
    """ A class for objects that perform random state-space
        search on an Eight Puzzle.
        This will also be used as a superclass of classes for
        other state-space search algorithms.
    """
    ### Add your Searcher method definitions here. ###
    def __init__(self, depth_limit):
        """ constructs a new Searcher object by initializing self and depth_limit
        """
        self.states = []
        self.num_tested = 0
        self.depth_limit = depth_limit
        

    def __repr__(self):
        """ returns a string representation of the Searcher object
            referred to by self.
        """
        # You should *NOT* change this method.
        s = type(self).__name__ + ': '
        s += str(len(self.states)) + ' untested, '
        s += str(self.num_tested) + ' tested, '
        if self.depth_limit == -1:
            s += 'no depth limit'
        else:
            s += 'depth limit = ' + str(self.depth_limit)
        return s
    
    
    def should_add(self, state):
        """ takes a State object called state and returns True if the called Searcher should add state to its list of untested states, and False otherwise
        """
        if state.creates_cycle():
            return False
        elif self.depth_limit != -1 and state.num_moves > self.depth_limit:
            return False
        else:
            return True
    

    def add_state(self, new_state):
        """ adds takes a single State object called new_state and adds it to the Searcherâ€˜s list of untested states
        """
        self.states.append(new_state)
         
    
    def add_states(self, new_states):
        """ takes a list State objects called new_states, and that processes the elements of new_states one at a time
        """
        for s in new_states:
            if self.should_add(s):
                self.add_state(s)
    
    
    def next_state(self):
        """ chooses the next state to be tested from the list of 
            untested states, removing it from the list and returning it
       """
        s = random.choice(self.states)
        self.states.remove(s)
        return s
    
    
    def find_solution(self, init_state):
        """ performs a full random state-space search, stopping when the goal state is found or when the Searcher runs out of untested states
        """
        self.add_state(init_state)
        
        while len(self.states) != 0:
            self.num_tested += 1
            s = self.next_state()
            # print(s, len(self.states))
            if s.is_goal():
                 return s
            else:
                 self.add_states(s.generate_successors())
        return None
        

### Add your BFSeacher and DFSearcher class definitions below. ###


class BFSearcher(Searcher):
    """ perform breadth-first search (BFS) instead of random search
        BFS involves always choosing one the untested states that has the smallest depth
    """
    def next_state(self):
        rem = self.states[0]
        self.states.remove(rem)
        return rem
       

class DFSearcher(Searcher):
    """ perform depth-first search (DFS) instead of random search
        DFS involves always choosing one the untested states that has the largest depth
    """
    def next_state(self):
        rem = self.states[-1]
        self.states.remove(rem)
        return rem
    
    
def h0(state):
    """ a heuristic function that always returns 0 """
    return 0

### Add your other heuristic functions here. ###
def h1(state):
    """ a heuristic function that returns the number of tiles in the called Board object that are not where they should be in the goal state
    """
    return state.board.num_misplaced()


def h2(state):
    """ a heuristic function that considers the number of tiles misplaced and how many moves it takes for them to reach the goal"""
    return state.board.num_misplaced() + state.num_moves


class GreedySearcher(Searcher):
    """ A class for objects that perform an informed greedy state-space
    based search on an Eight Puzzle."""
    ### Add your GreedySearcher method definitions here. ###
    
    def __init__(self, depth_limit, heuristic):
        """ constructor for a GreedySearcher object
            inputs:
                * depth_limit - the depth limit of the searcher
                * heuristic - a reference to the function that should be used 
        when computing the priority of a state
        """
    # add code that calls the superclass constructor
        super().__init__(-1)
        self.heuristic = heuristic
    
    
    def priority(self, state):
        """ takes a State object called state, and that computes and returns the priority of that state
        """
        return -1 * self.heuristic(state)
    
    
    def add_state(self, state):
        """ overrides (i.e., replaces) the add_state method that is inherited from Searcher
        """
        self.states += [[self.priority(state), state]]
        
    
    def next_state(self):
        """  overrides (i.e., replaces) the next_state method that is inherited from Searcher
        """
        st = max(self.states)
        self.states.remove(st)
        return st[-1]
    
    def __repr__(self):
        """ returns a string representation of the GreedySearcher object
            referred to by self.
        """
        # You should *NOT* change this method.
        s = type(self).__name__ + ': '
        s += str(len(self.states)) + ' untested, '
        s += str(self.num_tested) + ' tested, '
        s += 'heuristic ' + self.heuristic.__name__
        return s


### Add your AStarSeacher class definition below. ###

class AStarSearcher(GreedySearcher):
    """ A* is an informed search algorithm that assigns a priority to each state based on a heuristic function, and that selects the next state based on those priorities
        When A* assigns a priority to a state, it also takes into account the cost that has already been expended to get to that state (i.e. the number of moves to that state).
    """
    
    # def __init__(self, depth_limit, heuristic):
    #     super().__init__(-1)
    #     self.heuristic = heuristic


    def priority(self, state):
        """ takes a State object called state, and that computes and returns the priority of that state
        """
        return (self.heuristic(state) + state.num_moves) * -1
    
    
    # def add_state(self, state):
    #     self.states += [[self.priority(state), state]]
        
        
    # def next_state(self):
    #     st = max(self.states)
    #     self.states.remove(st)
    #     return st[1]
        
