#
# board.py (Final project)
#
# A Board class for the Eight Puzzle
#
# name: Mengting Bao
# email: mtbao@bu.edu
# 06/26/2022

class Board:
    """ A class for objects that represent an Eight Puzzle board.
    """
    def __init__(self, digitstr):
        """ a constructor for a Board object whose configuration
            is specified by the input digitstr
            input: digitstr is a permutation of the digits 0-9
        """
        # check that digitstr is 9-character string
        # containing all digits from 0-9
        assert(len(digitstr) == 9)
        for x in range(9):
            assert(str(x) in digitstr)

        self.tiles = [[0] * 3 for x in range(3)]
        self.blank_r = -1
        self.blank_c = -1

        # Put your code for the rest of __init__ below.
        # Do *NOT* remove our code above.
        for r in range(len(self.tiles)):
            for c in range(len(self.tiles[0])):
                self.tiles[r][c] = int(digitstr[3 * r + c])
                if self.tiles[r][c] == 0:
                    self.blank_r = r
                    self.blank_c = c
                    

    ### Add your other method definitions below. ###
    def __repr__(self):
        """ returns a string representation of a Board object
        """
        s = ''
        for r in range(len(self.tiles)):
            for c in range(len(self.tiles[0])):
                if self.tiles[r][c] != 0:
                    s += str(self.tiles[r][c]) + ' '
                else:
                    s += '_ '
                
                if c == 2:
                    s += '\n'
        return s
    
    
    
    def move_blank(self, direction):
        """ takes as input a string direction that specifies the direction in which the blank should move
            and that attempts to modify the contents of the called Board object accordingly
        """
        row = 0
        col = 0
        
        if direction == 'up':
            # if self.blank_r == 0 or self.blank_r > 2:
            #     return False
            # else:
            row = self.blank_r - 1
            col = self.blank_c
        
        elif direction == 'down':
            # if self.blank_r > 2:
            #     return False
            # else:
            row = self.blank_r + 1
            col = self.blank_c
        
        elif direction == 'left':
            # if self.blank_c == 0 or self.blank_c > 2:
            #     return False
            # else:
            row = self.blank_r
            col = self.blank_c - 1
        
        elif direction == 'right':
            # if self.blank_c == 2:
            #     return False
            # else:
            row = self.blank_r
            col = self.blank_c + 1
        
        else:
            statement = 'unknown direction: ' + str(direction)
            print(statement)
            return False
        
        if row < 0 or row >= 3 or col < 0 or col >= 3:
            return False
            
        self.tiles[self.blank_r][self.blank_c] = self.tiles[row][col]
        self.tiles[row][col] = 0
        self.blank_r = row
        self.blank_c = col
        # self.tiles[self.blank_r][self.blank_c] = self.tiles[row][col]
        
        return True
    
    
    def digit_string(self):
        """ creates and returns a string of digits that corresponds to the current contents of the called Board object’s tiles attribute.
        """
        s = ''
        for r in range(len(self.tiles)):
            for c in range(len(self.tiles[0])):
                s += str(self.tiles[r][c])
        return s
    
    
    def copy(self):
        """ returns a newly-constructed Board object that is a deep copy of the called object
        """
        new = Board(self.digit_string())
        return new
    
    
    def num_misplaced(self):
        """ counts and returns the number of tiles in the called Board object that are not where they should be in the goal state
        """
        num = 0
        # for row in range(len(self.tiles)):
        #     for col in range(len(self.tiles[0])):
        #         for i in range(len(self.digit_string())):
        #             if int(self.digit_string()[i]) == row * 3 + col:
        #                 num += 1
        # return num
        goal = '012345678'
        for i in range(len(self.digit_string())):
            if self.digit_string()[i] != '0':
                if goal[i] != self.digit_string()[i]:
                    num += 1
                else:
                    num += 0
            else:
                num += 0
        return num 
    
     
    def __eq__(self, other):
        """ overloads the == operator – creating a version of the operator that works for Board objects
        """
        if self.tiles == other.tiles:
            return True
        else:
            return False
